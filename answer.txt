
//题目描述:
//把二叉树打印成多行
//从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。
//https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
        vector<vector<int> > Print(TreeNode* pRoot)
        {
            vector<vector<int> > result;
            if(NULL == pRoot)
                return result;
            queue<TreeNode*> q1, q2;
            q1.push(pRoot);
            while(!q1.empty())
            {
                vector<int> tmp;
                while(!q1.empty())//用q2来存放下一层的值的地址
                {
                    tmp.push_back(q1.front()->val);//tmp用来暂时存放某一层的值(相当于取出q1对应的值)
                    if(NULL != q1.front()->left)
                        q2.push(q1.front()->left);
                    if(NULL != q1.front()->right)
                        q2.push(q1.front()->right);
                    q1.pop();
                }
                while(!q2.empty())//将q2里面的内容放到q1中
                {
                    q1.push(q2.front());
                    q2.pop();
                }
                result.push_back(tmp);
            }

            return result;
        }
    
};

//题目描述
//重建二叉树
//输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和
//中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍
//历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin)
    {
        if(pre.empty() || vin.empty())
            return NULL;
        TreeNode* root = new TreeNode(pre[0]);//生成二叉树的根节点
        int i = 0, root_loc = 0;
        while(vin[i] != pre[0])
        {
            ++i;
        }
        root_loc = i;//用root_loc记录根节点的下标
        vector<int> pre_left, pre_right, vin_left, vin_right;
        //将下一次递归调用时左子树的pre和vin数组准备好
        for(i = 0; i < root_loc; ++i)
        {
            pre_left.push_back(pre[i+1]);
            vin_left.push_back(vin[i]);
        }
        //将下一次递归调用时右子树的pre和vin数组准备好
        for(i = root_loc + 1; i < vin.size(); ++i)
        {
            pre_right.push_back(pre[i]);
            vin_right.push_back(vin[i]);
        }
        //递归调用，生成二叉树的左右子树
        root->left = reConstructBinaryTree(pre_left, vin_left);
        root->right = reConstructBinaryTree(pre_right, vin_right);
        return root;
    }
};


//题目描述
//用两个栈实现队列
//用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。
//https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking
class Solution
{
public:
    void push(int node)
    {
        stack1.push(node);
    }

    int pop()
    {
        if(stack2.empty())
        {
            while(!stack1.empty())
            {
                stack2.push(stack1.top());
                stack1.pop();
            }
        }
        int num = stack2.top();
        stack2.pop();
        return num;
    }

private:
    stack<int> stack1;//用来入栈
    stack<int> stack2;//用来出栈
};


//题目描述
//斐波那契数列
//大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。
//n<=39
#include <assert.h>
class Solution {
public:
    int Fibonacci(int n)
    {
        assert(n >= 0);
        if(n == 0)
            return 0;
        if(n == 1 || n == 2)
            return 1;
        return Fibonacci(n - 1) + Fibonacci(n - 2);
    }
};

/*
class Solution {
public:
    int Fibonacci(int n)
    {
        int x1 = 1, x2 = 1;
        int num = 0;
        if(n == 1 || n == 2)
            return 1;
        for(int i = 3; i <= n; ++i)
        {
            num = x1 + x2;
            x1 = x2;
            x2 = num;
        }
        return num;
    }
};
*/


//题目描述
//反转链表
//输入一个链表，反转链表后，输出新链表的表头。
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* ReverseList(ListNode* pHead)
    {
        ListNode *pre = NULL;
        ListNode *next = NULL;
        while(pHead != NULL)
        {
            next = pHead->next;
            pHead->next = pre;
            pre = pHead;
            pHead = next;
        }
        return pre;
    }
};


//题目描述
//从尾到头打印链表
//输入一个链表，按链表从尾到头的顺序返回一个ArrayList。
/**
*  struct ListNode {
*        int val;
*        struct ListNode *next;
*        ListNode(int x) :
*              val(x), next(NULL) {
*        }
*  };
*/
//方法1
/*
class Solution {
public:
    vector<int> printListFromTailToHead(ListNode* head)
    {
        ListNode *cur = head;
        vector<int> ret;
        while(cur)
        {
            ret.push_back(cur->val);
            cur = cur->next;
        }
        reverse(ret.begin(), ret.end());
        return ret;
    }
};
*/

//方法2
class Solution {
public:
    vector<int> printListFromTailToHead(ListNode* head)
    {
        ListNode *cur = head;
        vector<int> ret;
        while(cur)
        {
            ret.insert(ret.begin(), cur->val);
            cur = cur->next;
        }
        return ret;
    }
};


//题目描述
//跳台阶
//一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上
//一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
//方法一：递归
class Solution {
public:
    int jumpFloor(int number)
    {
        if(number < 0)
            return 0;
        if(number == 0 || number == 1 || number == 2)
            return number;
        return jumpFloor(number - 1) + jumpFloor(number - 2);
    }
};
//方法二：迭代
/*
class Solution {
public:
    int jumpFloor(int number)
    {
        if(number < 0)
            return 0;
        if(number == 0 || number == 1 || number == 2)
            return number;
        int f1 = 1, f2 = 2, result = 0;
        for(int i = 3; i <= number; ++i)
        {
            result = f2 + f1;
            f1 = f2;
            f2 = result;
        }
        return result;
    }
};
*/

//题目描述
//变态跳台阶
//一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。
//求该青蛙跳上一个n级的台阶总共有多少种跳法。
/*
class Solution {
public:
    int jumpFloorII(int number)
    {
        return pow(2, number - 1);
    }
};
*/
class Solution {
public:
    int jumpFloorII(int number)
    {
        int cur = 0;
        int sum = 0;
        while(number > 0)
        {
            cur = sum + 1;
            sum += cur;
            --number;
        }
        return cur;
    }
};


题目描述
二进制插入
有两个32位整数n和m，请编写算法将m的二进制数位插入到n的二进制的第j到第i位,其中二进制的位数从低位数到高位且以0开始。
给定两个数int n和int m，同时给定int j和int i，意义如题所述，请返回操作后的数，保证n的第j到第i位均为零，且m的二进制位数小于等于i-j+1。
class BinInsert { 
public: 
	int binInsert(int n, int m, int j, int i) 
	{ 
		m <<= j; 
		return n | m; 
	}
};

题目描述
跳石板
小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3…
这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的 石板，小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。
例如：
N = 4，M = 24：
4->6->8->12->18->24
于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main()
{
	int N, M;
	while (cin >> N >> M)
	{
		vector<int> steps(M + 1, INT_MAX);
		steps[N] = 0;
		for (int i = N; i <= M; ++i)
		{
			if (steps[i] == INT_MAX)
				continue;
			for (int j = 2; j * j <= i; ++j)
			{
				if (i % j == 0)
				{
					if (i + j <= M)
						steps[i + j] = min(steps[i] + 1, steps[i + j]);
					if (i + i / j <= M)
						steps[i + i / j] = min(steps[i] + 1, steps[i + i / j]);
				}
			}
		}
		if (steps[M] == INT_MAX)
			steps[M] = -1;
		cout << steps[M] << endl;
	}
	return 0;
}


题目描述：超长正整数相加
#include <iostream>
#include <string>
#include <cstdlib>
using namespace std;
int main()
{
	string str1, str2;
	while (cin >> str1 >> str2)
	{
		int len1 = str1.size() - 1;
		int len2 = str2.size() - 1;
		int n = len1 < len2 ? len1 : len2;
		string result = len1 > len2 ? str1 : str2;
		int m = len1 > len2 ? len1 : len2;
		int tag = 0;
		for (int i = 0; i <= n; ++i)
		{
			int sum = str1[len1 - i] + str2[len2 - i] - '0' - '0' + tag;
			tag = 0;
			if (sum > 9)
			{
				tag = 1;
				result[m - i] = sum - 10 + '0';
			}
			else
				result[m - i] = sum + '0';
		}
		while (tag == 1 && m - (++n) >= 0)
		{
			int sum = result[m - n] - '0' + tag;
			tag = 0;
			if (sum > 9)
			{
				tag = 1;
				result[m - n] = sum - 10 + '0';
			}
			else
				result[m - n] = sum + '0';
		}
		if (tag == 1)
			result.insert(result.begin(), '1');
		cout << result << endl;
	}
	return 0;
}

题目描述
inoc产品部 杨辉三角的变形
#include <iostream>
#include <vector>
using namespace std;

int main()
{
	int n;
	while (cin >> n)
	{
		vector<int> table(n * n + 1, 1);
		int bre = 0;
		if (n < 3)
		{
			cout << -1 << endl;
			continue;
		}
		int i = 3, num = 5, tag = 5;
		while (i <= n)
		{
			table[tag] = 1;
			table[tag + 1] = 0 + table[tag - num + 2] + table[tag - num + 3];
			if (table[tag + 1] % 2 == 0 && i == n)
			{
				cout << 2 << endl;
				break;
			}
			for (int j = 2; j < num - 2; ++j)
			{
				table[tag + j] = table[tag + j - num + 2] + table[tag + j - num + 1] + table[tag + j - num];
				if (table[tag + j] % 2 == 0 && i == n)
				{
					cout << j + 1 << endl;
					bre = 1;
					break;
				}
			}
			if (bre == 1)
				break;
			table[tag + num - 2] = 0 + table[tag - num + 1] + table[tag - num];
			if (table[tag + num - 2] % 2 == 0 && i == n)
			{
				cout << num - 1 << endl;
				break;
			}
			table[tag + num - 1] = 1;
			tag += num;
			num += 2;
			++i;
		}
		if (i > n)
			cout << -1 << endl;
	}
	return 0;
}


//题目描述
//手套
//在地下室里放着n种颜色的手套，手套分左右手，但是每种颜色的左右手手套个数不一定相同。
//A先生现在要出门，所以他要去地下室选手套。但是昏暗的灯光让他无法分辨手套的颜色，
//只能分辨出左右手。所以他会多拿一些手套，然后选出一双颜色相同的左右手手套。现在的问题是，
//他至少要拿多少只手套(左手加右手)，才能保证一定能选出一双颜色相同的手套。
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int findMinimum(int n, vector<int> left, vector<int> right)
{
	// write code here
	int left_min = INT_MAX, left_sum = 0;
	int right_min = INT_MAX, right_sum = 0;
	int sum = 0;
	for (int i = 0; i < n; ++i)
	{
		if (left[i] * right[i] == 0)
			sum += left[i] + right[i];
		else
		{
			left_sum += left[i];
			left_min = min(left_min, left[i]);
			right_sum += right[i];
			right_min = min(right_min, right[i]);
		}
	}
	return sum + min(left_sum - left_min + 1, right_sum - right_min + 1) + 1;
}

int main()
{
	vector<int> left = { 10, 9, 8, 7 };
	vector<int> right = { 4, 3, 2, 1 };
	int ret = findMinimum(4, left, right);
	cout << ret << endl;
	return 0;
}


//汽水瓶
/*
#include <iostream>
using namespace std;

int drink_num(int bottle_num)
{
    if (bottle_num == 1 )
        return 0;
    return bottle_num / 2;
}

int main()
{
    int in;
    while (cin >> in)
    {
        if (in == 0)
            break;
        cout << drink_num(in) << endl;
    }
    return 0;
}
*/

#include <iostream>
using namespace std;

int drink_num(int bottle_num)
{
    if (bottle_num == 1)
        return 0;
    if (bottle_num == 2)
        return 1;
    //return drink_num(bottle_num/3+bottle_num%3)+bottle_num/3;
    return drink_num(bottle_num-2)+1;
}

int main()
{
    int in;
    while (cin >> in)
    {
        if (in == 0)
            break;
        cout << drink_num(in) << endl;
    }
    return 0;
}

题目描述
//查找两个字符串a,b中的最长公共子串
//查找两个字符串a,b中的最长公共子串。若有多个，输出在较短串中最先出现的那个。
#include <iostream>
#include <string>
using namespace std;

int main()
{
    string a, b;
    while (cin >> a >> b)
    {
        if (a.size() > b.size())
            swap(a, b);
        string str_max;
        for (int i = 0; i < a.size(); ++i)
        {
            for (int j = i; j < a.size(); ++j)
            {
                string temp = a.substr(i, j-i+1);
                if (b.find(temp) == string::npos)
                    break;
                else if (temp.size() > str_max.size())
                    str_max = temp;
            }
        }
        cout << str_max << endl;
    }
    return 0;
}

//洗牌
#include <iostream>
#include <vector>
using namespace std;

int main()
{
	int T, n, k;
	cin >> T;
	while (T--)
	{
		cin >> n >> k;
		int num = 2 * n;
		vector<int> table(num);
		for (int i = 0; i < num; ++i)
			cin >> table[i];
		while (k--)
		{
			vector<int> temp(table);
			for (int i = 0; i < n; ++i)
			{
				table[2 * i] = temp[i];
				table[2 * i + 1] = temp[n + i];
			}
		}
		for (int i = 0; i < num - 1; ++i)
			cout << table[i] << " ";
		cout << table[num - 1] << endl;
	}
	return 0;
}


//mp3光标位置
#include <iostream>
#include <string>
using namespace std;

int main()
{
	int num, cur, top, bottom;
	string op;
	while (cin >> num >> op)
	{
		int op_len = op.size();
		cur = 1, top = 1, bottom = 4;
		for (int i = 0; i < op.size(); ++i)
		{
			if (op[i] == 'U')
			{
				if (cur == top && top == 1 && num > 3)
				{
					top = num - 3;
					bottom = num;
					cur = num;
				}
				else if (cur == top && num > 3)
				{
					--cur;
					--top;
					--bottom;
				}
				else
					cur = (cur + num - 2) % num + 1;
			}
			if (op[i] == 'D')
			{
				if (cur == bottom && cur == num)
				{
					top = 1;
					bottom = 4;
					cur = 1;
				}
				else if (cur == bottom)
				{
					++cur;
					++top;
					++bottom;
				}
				else
					cur = cur % num + 1;
			}
		}
		num = num < 4 ? num : 4;
		for (int i = 0; i < num - 1; ++i)
			cout << top + i << ' ';
		cout << top + num - 1 << endl;
		cout << cur << endl;
	}
	return 0;
}

//小易的升级之路
#include <iostream>
#include <vector>
using namespace std;

int gcd(int a, int b)
{
	while (a != b)
	{
		if (a > b)
			a -= b;
		else
			b -= a;
	}
	return a;
}

int main()
{
	int n, a;
	while (cin >> n >> a)
	{
		vector<int> b(n, 0);
		for (int i = 0; i < n; ++i)
			cin >> b[i];
		for (int i = 0; i < n; ++i)
		{
			if (a >= b[i])
				a += b[i];
			else
				a += gcd(a, b[i]);
		}
		cout << a << endl;
	}
	return 0;
}


//计算字符串的距离
#include <iostream>
#include <string>
#include <vector>
using namespace std;

int Min(int a, int b, int c)
{
	return (a<b ? a : b)<c ? (a<b ? a : b) : c;
}

int calStringDistance(string charA, string charB)
{
	int An = charA.size(), Bn = charB.size();
	vector<vector<int> > dp(Bn + 1, vector<int>(An + 1, 0));
	dp[0][0] = 0;
	for (int i = 1; i <= An; ++i)
		dp[0][i] = i;
	for (int i = 1; i <= Bn; ++i)
		dp[i][0] = i;
	for (int i = 1; i <= Bn; ++i)
	{
		for (int j = 1; j <= An; ++j)
		{
			if (charB[i-1] == charA[j-1])
				dp[i][j] = dp[i - 1][j - 1];
			else
				dp[i][j] = Min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1;
		}
	}
	return dp[Bn][An];
}

int main()
{
	string charA, charB;
	while (cin >> charA >> charB)
	{
		cout << calStringDistance(charA, charB) << endl;
	}
	return 0;
}

//微信红包
class Gift {
public:
	int getValue(vector<int> gifts, int n)
	{
		// write code here
		sort(gifts.begin(), gifts.end());
		int count = 0;
		int temp = -1;
		for (int i = 0; i < n; ++i)
		{
			if (temp == gifts[i])
				++count;
			else
			{
				temp = gifts[i];
				count = 1;
			}
			if (count > n / 2)
				return temp;
		}
		return 0;
	}
};


//寻找第一个在字符串中只出现一次的字符
#include <iostream>
#include <string>
using namespace std;

int main()
{
	string str;
	while (cin >> str)
	{
		int tag = 0;
		char ch;
		while (str.size() != 0)
		{
			tag = 0;
			ch = str[0];
			str.erase(str.begin());
			string::iterator pos = str.begin();
			while (pos != str.end())
			{
				if (ch == *pos)
				{
					tag = 1;
					pos = str.erase(pos);
					continue;
				}
				++pos;
			}
			if (tag == 0)
				break;
		}
		if (tag == 1)
			cout << -1 << endl;
		else if (tag == 0)
			cout << ch << endl;
	}
	return 0;
}

//快到碗里来
#include <iostream>
using namespace std;

int main()
{
    double n, r;
    while (cin >> n >> r)
    {
        if (n <= 2 * 3.14 * r)
            cout << "Yes" <<endl;
        else
            cout << "No" << endl;
    }
    return 0;
}


//变态跳台阶
class Solution {
public:
	int jumpFloorII(int number)
	{
		int sum = 0, cur = 0;
		while (number > 0)
		{
			cur = sum + 1;
			sum += cur;
			--number;
		}
		return cur;
	}
};

//三角形
#include <iostream>
#include <string>
using namespace std;

string add(string s1, string s2)
{
	int len1 = s1.size();
	int len2 = s2.size();
	string res = "";
	int i, j, k, t = 0;
	for (i = len1 - 1, j = len2 - 1; i >= 0 && j >= 0; --i, --j)
	{
		k = (s1[i] - '0') + (s2[j] - '0') + t;
		res = (char)(k % 10 + '0') + res;
		t = k / 10;
	}
	while (i >= 0) {
		k = (s1[i] - '0') + t;
		res = (char)(k % 10 + '0') + res;
		t = k / 10;
		--i;
	}
	while (j >= 0) {
		k = (s2[j] - '0') + t;
		res = (char)(k % 10 + '0') + res;
		t = k / 10;
		--j;
	}
	if (t > 0)
		res = (char)(t + '0') + res;
	return res;
}

bool great(string s1, string s2)
{
	int len1 = s1.size();
	int len2 = s2.size();
	if (len1 > len2)
		return true;
	else if (len1 < len2)
		return false;
	else
		return s1 > s2;
}

int main()
{
	string a, b, c;
	while (cin >> a >> b >> c)
	{
		if (great(add(a, b), c) && great(add(a, c), b) && great(add(b, c), a))
			cout << "Yes" << endl;
		else
			cout << "No" << endl;
	}
}


//猴子分桃
#include <iostream>
#include <cmath>
using namespace std;
int main()
{
	int n;
	while (cin >> n)
	{
		if (n == 0)
			break;
		cout << (long)pow(5, n) - 4 << " " << (long)pow(4, n) - 4 + n << endl;
	}
	return 0;
}


//不用加减乘除做加法
class Solution {
public:
	int Add(int num1, int num2)
	{
		while (num2 != 0)
		{
			int temp = num1 ^ num2;
			num2 = (num1 & num2) << 1;
			num1 = temp;
		}
		return num1;
	}
};


//假币
#include <iostream>
using namespace std;

int main()
{
	int n;
	while (cin >> n)
	{
		int count = 0;
		if (n == 0)
			break;
		while (n > 1)
		{
			++count;
			n = n / 3 + (n % 3 > 0);
		}
		cout << count << endl;
	}
	return 0;
}

<<<<<<< HEAD
/*
//求正数数组的最小不可组成和
class Solution {
public:
	int getFirstUnFormedNum(vector<int> arr, int len)
    {
        int min = arr[0], max = 0;
        for (int i = 0; i < len; ++i)
        {
            max += arr[i];
            min = arr[i] < min ? arr[i] : min;
        }
        //dp[i][j]表示arr[0..i]自由选择，能否累加出j
        //也就是背包容量为j，能不能恰好把背包装满
        vector<vector<bool> > dp(len, vector<bool>(max+1, false));
        //初始化第一行，除了dp[0][0]和dp[0][arr[0]]为true其他都是false
        dp[0][0] = true;
        dp[0][arr[0]] = true;
        //初始化第一列
        for (int i = 1; i < len; ++i)
        {
            dp[i][0] = true;
        }
        for (int i = 1; i < len; ++i)
        {
            for (int j = 1; j <= max; ++j)
            {
                if (j - arr[i] >= 0)//如果背包可以放下arr[i]
                    dp[i][j] = dp[i-1][j-arr[i]] || dp[i-1][j];//有和没有两种情况
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        for (int i = min+1; i < max; ++i)
        {
            if (!dp[len-1][i])
                return i;
        }
        return max + 1;
    }
};
*/
//优化
class Solution {
public:
	int getFirstUnFormedNum(vector<int> arr, int len)
    {
        int min = arr[0], max = 0;
        for (int i = 0; i < len; ++i)
        {
            max += arr[i];
            min = arr[i] < min ? arr[i] : min;
        }
        vector<bool> dp(max+1, false);
        dp[0] = true;
        dp[arr[0]] = true;
        for (int i = 1; i < len; ++i)
        {
            for (int j = max; j > 0; --j)
            {
                if (j - arr[i] >= 0)//如果背包可以放下arr[i]
                    dp[j] = dp[j-arr[i]] || dp[j];//有和没有两种情况
                else
                    dp[j] = dp[j];
            }
        }
        for (int i = min+1; i < max; ++i)
        {
            if (!dp[i])
                return i;
        }
        return max + 1;
    }
};
=======
>>>>>>> 91fff60f3ff01e37eb19f9db4e340fe8de7eb870
